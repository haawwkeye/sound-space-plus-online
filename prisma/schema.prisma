// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int          @id @unique @default(autoincrement())
    name             String
    nameHistory      String[]
    avatar           String?
    verified         Boolean      @default(false)
    role             Role         @default(USER)
    pass             String?
    sessions         Session[]
    moderations      Moderation[] @relation("victim")
    moderationsGiven Moderation[] @relation("admin")
    registerIp       String?
    registerLocation String?
    ownedAlts        Alt[]        @relation("altOwner")
    matchedAlts      Alt[]        @relation("alt")
    dateCreated      DateTime?    @default(now())
}

model Session {
    id           String      @id @unique @default(uuid())
    type         SessionType @default(WEB)
    user         User        @relation(fields: [userId], references: [id])
    cookie       String?
    userAgent    String?
    ip           String?
    location     String?
    lastAccessed DateTime    @default(now())
    dateCreated  DateTime    @default(now())
    userId       Int
    invalid      Boolean     @default(false)
}

model Moderation {
    id           Int            @id @unique @default(autoincrement())
    user         User           @relation("victim", fields: [userId], references: [id])
    admin        User           @relation("admin", fields: [adminId], references: [id])
    type         ModerationType
    item         String?
    reason       String         @default("No reason provided")
    resolved     Boolean        @default(false)
    dateResolved DateTime?
    dateCreated  DateTime       @default(now())
    expiresAt    DateTime?
    userId       Int
    adminId      Int
}

model Alt {
    id          String   @id @unique @default(uuid())
    matches     Int
    user        User     @relation("altOwner", fields: [userId], references: [id])
    userId      Int
    match       User     @relation("alt", fields: [matchId], references: [id])
    matchId     Int
    lastMatched DateTime @default(now())
}

enum Role {
    USER
    MOD
    ADMIN
}

enum SessionType {
    WEB
    GAME
}

enum ModerationType {
    NAME
    WARN
    BAN
}
